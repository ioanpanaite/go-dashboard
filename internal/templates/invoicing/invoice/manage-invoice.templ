package invoice_view

import "kub/dashboardES/internal/models"
import "kub/dashboardES/internal/templates/layout"
import "fmt"

type ManageInvoiceViewData struct {
	CompanyCharges  []models.InvoiceCharge
	Company         models.Company
	EmployeeCharges []models.InvoiceCharge
	EmployeeNames   map[string]string
	Module          string
	Page            string
}

templ ManageInvoiceView(data ManageInvoiceViewData) {
	@layout.Base(false, data.Module, data.Page) {
		<script type="text/javascript" src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
		//Datatables import
		<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css"/>
		<script type="text/javascript" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
		<script type="text/javascript" src="https://cdn.datatables.net/select/1.3.4/js/dataTables.select.min.js"></script>
		<div class="p-4">
			<h5 class="hidden text-center py-1" id="notice">Please wait, page is loading...</h5>
			<div class="flex justify-end px-4 pb-2">
				<input class="hidden" id="companyId" value={ fmt.Sprintf("%d", data.Company.Id) }/>
				<input class="hidden" id="year" value={ fmt.Sprintf("%d", data.CompanyCharges[0].Year) }/>
				<input class="hidden" id="month" value={ fmt.Sprintf("%d", data.CompanyCharges[0].Month) }/>
				<div class="grow"></div>
				<sl-button
					id="invoiceEditBtn"
					class="filterable-hx-rows"
					hx-trigger="click delay:50ms"
					hx-get={ fmt.Sprintf("/panels/invoicing/invoice/form/%d", data.CompanyCharges[0].InvoiceID.Int64) }
					hx-indicator=".htmx-indicator"
					variant="primary"
					hx-on::before-request="document.getElementById('invoiceEditBtn').loading=true;"
					hx-on::after-request="document.getElementById('invoiceEditBtn').loading=false;showEditMode();"
					onclick={ setEditBtnHeaders(data.Company) }
					hx-target="#invoiceEditContent"
					hx-swap="innerHTML"
					size="medium"
				>
					Edit Internal Invoice
				</sl-button>
				<div id="editActionBtnCtn" class="gap-3 hidden">
					<sl-button
						id="invoiceActionBtn"
						hx-trigger="click delay:50ms"
						hx-swap="none"
						hx-post={ fmt.Sprintf("/panels/invoicing/invoice/%d", data.CompanyCharges[0].InvoiceID.Int64) }
						hx-on::before-request="document.getElementById('invoiceActionBtn').loading=true;"
						hx-on::after-request="window.location.reload(); document.getElementById('notice').classList.remove('hidden');"
						hx-indicator=".htmx-indicator"
						variant="success"
						size="medium"
					>
						Update Invoice
					</sl-button>
					//Close Edit mode
					<sl-tooltip placement="top" content="Exit edit mode">
						<sl-button
							size="medium"
							variant="danger"
							onclick="exitEditMode()"
						>
							<sl-icon name="x-lg"></sl-icon>
						</sl-button>
					</sl-tooltip>
				</div>
			</div>
			//Filters
			<div id="controlBox" class="text-sm px-8 hidden w-full justify-start items-end pb-2 gap-4">
				<div class="pb-3"><sl-switch size="small" id="toggleSelectedRows">See Selection</sl-switch></div>
				<div class="grow"></div>
				<div class="flex gap-3 items-end">
					<div class="flex flex-col">
						<label for="invFromDate">From:</label>
						<input class="border border-gray-400 p-1 rounded" type="date" id="invFromDate" class="w-32 border rounded"/>
					</div>
					<div class="flex flex-col">
						<label for="invToDate">To:</label>
						<input class="border border-gray-400 p-1 rounded" type="date" id="invToDate" class="w-32 border rounded"/>
					</div>
					<sl-button
						size="small"
						id="AddRangeBtn"
						variant="primary"
						class=""
					>
						Add Range
					</sl-button>
				</div>
			</div>
			<div class="border-b-[1px] border-b-gray-300 mx-5 pb-2"></div>
			<div id="invoiceEditContent" class="hidden"></div>
			<div id="invoiceUnEditContent">
				// Company charges
				<div class="border border-gray-300 rounded mx-5">
					<div class="bg-black text-white py-2 px-4 flex items-center rounded-t-lg">
						<h2 class="font-semibold">Company Charges</h2>
						<div class="grow"></div>
						<button type="button" onclick={ toggleTable("companyCharges") } class="pl-4">
							<i id="companyChargesShowIcon" class="fas fa-chevron-up"></i>
						</button>
					</div>
					if len(data.CompanyCharges) == 0 {
						<div class="text-center py-2">
							<p class="font-semibold">No charges found</p>
						</div>
					} else {
						<table class="w-full" id="companyCharges">
							<thead>
								<tr>
									<th class="px-2 py-2 bg-gray-800 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
										ID
									</th>
									<th class="px-2 py-2 bg-gray-800 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
										Type
									</th>
									<th class="px-2 py-2 bg-gray-800 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
										Date
									</th>
									<th class="px-2 py-2 bg-gray-800 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
										Amount
									</th>
								</tr>
							</thead>
							<tbody>
								for _, charge := range data.CompanyCharges {
									<tr class="">
										<td class="px-1 py-1 border-b border-gray-200 text-sm">{ fmt.Sprintf("%d", charge.ID) }</td>
										<td class="px-1 py-1 border-b border-gray-200 text-sm">{ charge.ChargesDefTypesName }</td>
										<td class="px-1 py-1 border-b border-gray-200 text-sm">{ charge.Date }</td>
										<td class="px-1 py-1 border-b border-gray-200 text-sm">
											<sl-format-number
												type="currency"
												currency="AED"
												value={ fmt.Sprintf("%f", charge.Amount) }
												lang="en-US"
											></sl-format-number>
										</td>
									</tr>
								}
							</tbody>
						</table>
					}
				</div>
				// Employee charges
				<div class="border border-gray-300 rounded mx-5 mt-6 mb-4">
					<div class="bg-black text-white py-2 px-4 flex items-center rounded-t-lg">
						<h2 class="font-semibold">Employee Charges</h2>
						<div class="grow"></div>
						// <p>Filters</p>
						<button type="button" onclick={ toggleTable("employeeCharges") } class="pl-4">
							<i id="employeeChargesShowIcon" class="fas fa-chevron-up"></i>
						</button>
					</div>
					if len(data.EmployeeCharges) == 0 {
						<div class="text-center py-2">
							<p class="font-semibold">No charges found</p>
						</div>
					} else {
						<table class="w-full" id="employeeCharges">
							<thead>
								<tr>
									<th class="px-2 py-2 bg-gray-800 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
										ID
									</th>
									<th class="px-2 py-2 bg-gray-800 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
										Employee
									</th>
									<th class="px-2 py-2 bg-gray-800 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
										Type
									</th>
									<th class="px-2 py-2 bg-gray-800 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
										Date
									</th>
									<th class="px-2 py-2 bg-gray-800 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
										Amount
									</th>
								</tr>
							</thead>
							<tbody>
								for _, eCharge := range data.EmployeeCharges {
									<tr class="">
										<td class="px-1 py-1 border-b border-gray-200 text-sm">{ fmt.Sprintf("%d", eCharge.ID) }</td>
										<td class="px-1 py-1 border-b border-gray-200 text-sm">{ data.EmployeeNames[eCharge.ReferenceUUID] }</td>
										<td class="px-1 py-1 border-b border-gray-200 text-sm">{ eCharge.ChargesDefTypesName }</td>
										<td class="px-1 py-1 border-b border-gray-200 text-sm">{ eCharge.Date }</td>
										<td class="px-1 py-1 border-b border-gray-200 text-sm">
											<sl-format-number
												type="currency"
												currency="AED"
												value={ fmt.Sprintf("%f", eCharge.Amount) }
												lang="en-US"
											></sl-format-number>
										</td>
									</tr>
								}
							</tbody>
						</table>
					}
				</div>
			</div>
		</div>
		<script>
	var jsonData = {}

	function showEditMode(){
		document.getElementById("invoiceEditBtn").classList.add("hidden");
		var editCtn = document.getElementById("editActionBtnCtn")
		var controlBox = document.getElementById("controlBox")
		controlBox.classList.remove("hidden");
		controlBox.classList.add("flex")
		editCtn.classList.remove("hidden");
		editCtn.classList.add("flex");
		document.getElementById("invoiceEditContent").classList.remove("hidden");
		document.getElementById("invoiceUnEditContent").classList.add("hidden");
	}

	function exitEditMode(){
		document.getElementById("invoiceEditBtn").classList.remove("hidden");
		var editCtn = document.getElementById("editActionBtnCtn")
		var controlBox = document.getElementById("controlBox")
		controlBox.classList.add("hidden");
		controlBox.classList.remove("flex")
		editCtn.classList.add("hidden");
		editCtn.classList.remove("flex");
		document.getElementById("invoiceEditContent").classList.add("hidden");
		document.getElementById("invoiceUnEditContent").classList.remove("hidden");
	}

//Update btn clicked
	document.getElementById('#invoiceActionBtn').addEventListener("click", function(){
		var btn = document.getElementById("invoiceActionBtn");
		jsonData.year = document.getElementById("year").value;
  		jsonData.month = document.getElementById("month").value;
		jsonData.companyId = document.getElementById("companyId").value;
		//called from global function
		jsonData.selections = getSelectedCharges();
		if (!jsonData.selections.length){
			alert("Please select charges to update invoice")
			return
		}
		btn.setAttribute("hx-headers",JSON.stringify(jsonData))
	  })

	//Filter button click listener
	document.getElementById("filterButton").addEventListener("click", function() {
		if (document.getElementById("editActionBtnCtn").classList.contains("hidden")){
			return;
		}
		var editModeBtn = document.getElementById("invoiceEditBtn");
		editModeBtn.click();
	});

	///Toggle SelectedRows ///////////////
	//toggleSelectedRows
	const toggleSelected = document.getElementById("toggleSelectedRows")
	toggleSelected.addEventListener('sl-change', () => {
	// tables
		var cTable = document.querySelectorAll('#companyCharges tr');
		var eTable = document.querySelectorAll('#employeeCharges tr');
		var pTable = document.querySelectorAll('#pemployeeCharges tr');
		document.getElementById("employeeTableIds").dataset.index.split(",").forEach(function(tableId){
			var ppTable = document.querySelectorAll(`#${tableId} tr`);
			var eeTable = document.querySelectorAll(`#p${tableId} tr`);
			if(toggleSelected.checked){
					toggleSel(eeTable)
					toggleSel(ppTable)

				}else{
					showAll(eeTable)
					showAll(ppTable)

				}
		})

		if(toggleSelected.checked){
		toggleSel(cTable)
		toggleSel(eTable)
		toggleSel(pTable)

	}else{
		showAll(cTable)
		showAll(eTable)
		showAll(pTable)

	}
	  function toggleSel(elements) {
        elements.forEach((row) => {
           if (!row.classList.contains("selected")){
			row.classList.add("hidden")
		   }
        });
    }
		function showAll(elements){
			elements.forEach((row)=>{
				row.classList.remove("hidden")
			})
		}
	})

///Date Range ////////////
  var fromDate = document.getElementById("invFromDate");
  var toDate = document.getElementById("invToDate");

  fromDate.setAttribute("max", new Date().toISOString().split('T')[0]);
  toDate.setAttribute("max", new Date().toISOString().split('T')[0]);
	fromDate.addEventListener("change", function (e) {
		fromDate.value = formatDate(new Date(e.target.value));
	});
	toDate.addEventListener("change", function (e) {
		toDate.value = formatDate(new Date(e.target.value));
	});

	//Add range btn
	document.getElementById("AddRangeBtn").addEventListener("click",()=>{
		var fDate = new Date(fromDate.value)
		var tDate = new Date(toDate.value)
		if(fDate.toString() ==="Invalid Date" || tDate.toString() ==="Invalid Date" || fDate > tDate){
			alert("Invalid date range");
			return;
		}
		try {
		//Init table props
		var companyTable = document.querySelectorAll("#companyCharges tbody tr td.date")
		var employeeTable = document.querySelectorAll("#employeeCharges tbody tr td.date")
		var payrollTable = document.querySelectorAll("#pemployeeCharges tbody tr td.selected")
		performSelection(companyTable,"cCharge")
		performSelection(employeeTable,"eCharge")
		document.getElementById("employeeTableIds").dataset.index.split(",").forEach(function(tableId){
			try {
			//Grouped Employee Charges
			var eTable = document.querySelectorAll(`#${tableId} tbody tr td.date`)
			performSelection(eTable,`${tableId}-epCharge`)
			//Grouped Employee Payroll
			var pTable = document.querySelectorAll(`#p${tableId} tbody tr td.date`)
			performSelection(pTable,`p${tableId}-pCharge`)
			}catch (e){
				//handle error
				console.log("Table is empty")
			}
		})
		performSelection(payrollTable,"pCharge")

	}catch (e){
		//handle error
				console.log("Table is empty")
			}

		function performSelection(data,id){
		for (var i=0; i < data.length;i++){
			var date = new Date(data[i].innerHTML)
			if (fDate <= date && tDate>=date ) {
				document.getElementById(`${id}-${i}`).classList.add("bg-blue-100", "selected")
				document.getElementById(`check-${id}-${i}`).checked = true
			}
		}	
	}
	})
	</script>
	}
}

script setEditBtnHeaders(data models.Company) {
	var editBtn = document.getElementById("invoiceEditBtn")
	var jsonData = {}
	jsonData.companyId= data.Id
	jsonData.uuidList = data.Uuid
	editBtn.setAttribute("hx-headers",JSON.stringify(jsonData))
}
